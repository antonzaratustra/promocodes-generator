document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const eventCode = urlParams.get('event');
    const year = urlParams.get('year');
    const promoCode = urlParams.get('promo');
    const isAdmin = urlParams.get('admin') === 'true';
    
    console.log('Event code:', eventCode);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function getInterfaceLanguage(eventCode) {
        if (eventCode === 'DSWEN' || eventCode === 'DRWEN') return 'en';
        return 'ru';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function getInterfaceTexts(lang) {
        return {
            'ru': {
                year: '–ì–æ–¥:',
                promo: '–ü—Ä–æ–º–æ–∫–æ–¥:',
                totalPaid: '–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ:',
                totalPending: '–í—Å–µ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ:',
                totalCommission: '–í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ:',
                tableHeaders: [
                    '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã',
                    'ID –∑–∞–∫–∞–∑–∞',
                    '–ü—Ä–æ–¥—É–∫—Ç—ã',
                    '–ò–º—è –∫—É–ø–∏–≤—à–µ–≥–æ',
                    '–¶–µ–Ω–∞',
                    'Email',
                    '–í—ã–ø–ª–∞—Ç–∞',
                    '–û–ø–ª–∞—á–µ–Ω–æ'
                ]
            },
            'en': {
                year: 'Year:',
                promo: 'Promo code:',
                totalPaid: 'Total paid:',
                totalPending: 'Total pending:',
                totalCommission: 'Total referrals:',
                tableHeaders: [
                    'Payment time',
                    'Order ID',
                    'Products',
                    'Buyer name',
                    'Price',
                    'Email',
                    'Commission',
                    'Paid'
                ]
            }
        }[lang];
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const interfaceLang = getInterfaceLanguage(eventCode);
    const texts = getInterfaceTexts(interfaceLang);
    
    console.log('Admin mode:', isAdmin);
    console.log('Interface language:', interfaceLang);
    
    if (!eventCode || !year || !promoCode) {
        showError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL');
        return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('Setting event title...');
    const eventName = getEventNameByCode(eventCode);
    console.log('Event name:', eventName);
    document.getElementById('eventTitle').textContent = eventName;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const loadingText = document.getElementById('loadingText');
    if (interfaceLang === 'en') {
        loadingText.textContent = 'Loading data...';
    } else {
        loadingText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
    }
    
    document.getElementById('yearLabel').textContent = texts.year;
    document.getElementById('promoLabel').textContent = texts.promo;
    document.getElementById('yearInfo').textContent = year;
    document.getElementById('promoInfo').textContent = promoCode;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const headers = document.querySelectorAll('#referralsTable thead th');
    headers.forEach((header, index) => {
        if (index < texts.tableHeaders.length) {
            header.textContent = texts.tableHeaders[index];
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.getElementById('totalPaidLabel').textContent = texts.totalPaid;
    document.getElementById('totalPendingLabel').textContent = texts.totalPending;
    document.getElementById('totalCommissionLabel').textContent = texts.totalCommission;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    const viewButtons = document.querySelectorAll('.action-button.view');
    const copyButtons = document.querySelectorAll('.action-button.copy');
    const deleteButtons = document.querySelectorAll('.action-button.delete');
    
    if (interfaceLang === 'en') {
        viewButtons.forEach(btn => btn.textContent = 'üëÅÔ∏è View');
        copyButtons.forEach(btn => btn.textContent = 'üîó Copy link');
        deleteButtons.forEach(btn => btn.textContent = 'üóëÔ∏è Delete');
    } else {
        viewButtons.forEach(btn => btn.textContent = 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä');
        copyButtons.forEach(btn => btn.textContent = 'üîó –°—Å—ã–ª–∫–∞');
        deleteButtons.forEach(btn => btn.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    function getEventNameByCode(code) {
        const eventNames = {
            'MRWRU': 'RestaurantWeek –ú–æ—Å–∫–≤–∞',
            'DRWRU': 'RestaurantWeek –î—É–±–∞–π',
            'DRWEN': 'RestaurantWeek Dubai',
            'MSWRU': 'SalonWeek –ú–æ—Å–∫–≤–∞',
            'DSWRU': 'SalonWeek –î—É–±–∞–π',
            'DSWEN': 'SalonWeek Dubai'
        };
        
        return eventNames[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    async function fetchReferralData(eventCode, year, promoCode, isAdmin) {
        try {
            const dataUrl = getDataUrl(eventCode);
            const tableBody = document.getElementById('referralsTableBody');
            
            const response = await fetch(`${dataUrl}?eventCode=${eventCode}&year=${year}&promoCode=${promoCode}`, {
                method: 'GET',
                mode: 'no-cors'
            });
            
            let data;
            
            try {
                const jsonResponse = await response.json();
                console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', jsonResponse);
                
                if (jsonResponse.error) {
                    throw new Error(jsonResponse.error);
                }
                
                if (jsonResponse.success && jsonResponse.data) {
                    data = jsonResponse.data;
                } else {
                    console.warn('–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                    data = getMockData(eventCode);
                }
            } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', parseError);
                data = getMockData(eventCode);
            }
            
            if (validateData(data)) {
                renderReferralsTable(data, eventCode, isAdmin);
                updateStats(data, eventCode);
            } else {
                console.warn('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    function getDataUrl(eventCode) {
        switch(eventCode) {
            case 'MRWRU':
            case 'DRWRU':
                return 'https://script.google.com/macros/s/AKfycbw1OX4UDGmlZzmE1TMj0ZY5-H1zHdoMzmUv7zUryczOGyhMONBzoCbhnNESaHjRBAY89A/exec';
            case 'DRWEN':
                return 'https://script.google.com/macros/s/AKfycbw1OX4UDGmlZzmE1TMj0ZY5-H1zHdoMzmUv7zUryczOGyhMONBzoCbhnNESaHjRBAY89A/exec';
            case 'MSWRU':
            case 'DSWRU':
                return 'https://script.google.com/macros/s/AKfycbwe5iDg_rmBd7thFQyt49QY-pTOQ4w7HSHz1eJWHKcuAERBC3j_u8lY8QSpKJUo0K45Sw/exec';
            case 'DSWEN':
                return 'https://script.google.com/macros/s/AKfycbyPiPe_a0iQdPYKeEFsBAMfGKbMqxRqJgOnevV8KL0pFBWlWLrTnbRG_VQ50t42DXNV/exec';
            default:
                throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    function renderReferralsTable(data, eventCode, isAdmin) {
        const tableBody = document.getElementById('referralsTableBody');
        tableBody.innerHTML = '';
        
        if (!data || data.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="9">–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>`;
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const currency = eventCode.endsWith('EN') ? '$' : '‚ÇΩ';
        
        data.forEach(item => {
            const row = document.createElement('tr');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Å—Ç–æ–ª–±—Ü–µ "–û–ø–ª–∞—á–µ–Ω–æ"
            const paidContent = isAdmin
                ? `<input type="checkbox" class="paid-checkbox" data-orderid="${item.orderid}" ${item.isPaid ? 'checked' : ''}>`
                : (item.isPaid ? '‚úÖ' : '‚è≥');
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –∫–∞–∫ 5% –æ—Ç —Ü–µ–Ω—ã
            const commission = parseFloat(item.price) * 0.05;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ orderid
            const orderId = item.orderid ? String(item.orderid).toUpperCase() : '-';
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            const adminUrl = `index.html?event=${eventCode}&year=${year}&promo=${promoCode}&admin=true`;
            const viewUrl = `referrals.html?event=${eventCode}&year=${year}&promo=${promoCode}`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            const actions = `
                <div class="action-buttons">
                    <button onclick="window.location.href='${adminUrl}'" class="action-button view">üëÅÔ∏è View</button>
                    <button onclick="copyLink('${viewUrl}'); return false;" class="action-button copy">üîó Copy link</button>
                    ${isAdmin ? `<button onclick="deleteReferral('${item.orderid}'); return false;" class="action-button delete">üóëÔ∏è Delete</button>` : ''}
                </div>
            `;
            
            row.innerHTML = `
                <td>${formatDate(item.sent)}</td>
                <td>${orderId}</td>
                <td>${item.products || '-'}</td>
                <td>${item.name || '-'}</td>
                <td>${parseFloat(item.price).toFixed(2)} ${currency}</td>
                <td>${item.email || '-'}</td>
                <td>${commission.toFixed(2)} ${currency}</td>
                <td>${paidContent}</td>
                <td>${actions}</td>
            `;
            
            tableBody.appendChild(row);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
        if (isAdmin) {
            console.log('Adding checkbox handlers');
            document.querySelectorAll('.paid-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const orderId = this.dataset.orderid;
                    const isChecked = this.checked;
                    console.log('Updating payment status for orderId:', orderId, 'to', isChecked);
                    updatePaymentStatus(orderId, isChecked);
                });
            });
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStats(data, eventCode) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
        const currency = eventCode.endsWith('EN') ? '$' : '‚ÇΩ';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let paidValue = '0';
        let pendingValue = '0';
        let peopleValue = '0';
        
        if (data && data.length > 0) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const totalPaid = data.reduce((sum, item) => sum + (item.isPaid ? parseFloat(item.price) : 0), 0);
            const totalPending = data.reduce((sum, item) => sum + (!item.isPaid ? parseFloat(item.price) : 0), 0);
            const totalPeople = data.length;

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            paidValue = totalPaid > 0 ? `${totalPaid.toFixed(2)} ${currency}` : '0';
            pendingValue = totalPending > 0 ? `${totalPending.toFixed(2)} ${currency}` : '0';
            const peopleSuffix = interfaceLang === 'en' ? 'people' : '—á–µ–ª–æ–≤–µ–∫';
            peopleValue = totalPeople > 0 ? `${totalPeople} ${peopleSuffix}` : '0';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º DOM
        document.getElementById('totalPaid').textContent = paidValue;
        document.getElementById('totalPending').textContent = pendingValue;
        document.getElementById('totalCommission').textContent = peopleValue;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function formatDate(dateString) {
        if (!dateString) return '-';
        
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU');
    }
    
    function formatReferer(url) {
        if (!url) return '-';
        
        // –°–æ–∫—Ä–∞—â–∞–µ–º URL –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return url.replace(/https?:\/\/(www\.)?/, '').split('/')[0];
    }
    
    function showError(message) {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="error-container">
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <a href="/" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        `;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    function getMockData(eventCode) {
        const isEnglish = eventCode.endsWith('EN');
        
        return [
            {
                sent: '2024-11-06 15:32:37',
                orderid: '6410618:1336588072',
                products: 'Ticket Test - 1x0 = 0',
                name: 'Test promocode',
                price: isEnglish ? '100' : '5000',
                referer: isEnglish ? 'https://dubaisalonweek.com/' : 'https://salonweek.ru/moscow',
                email: 'testsspromocode@gmail.com',
                isPaid: true
            },
            {
                sent: '2024-11-11 11:59:45',
                orderid: '6410618:6827327921',
                products: 'Premium Ticket - 1x200 = 200',
                name: 'Shahinaz',
                price: isEnglish ? '200' : '10000',
                referer: isEnglish ? 'https://dubaisalonweek.com/#price' : 'https://restaurantweek.ru/dubai',
                email: 'shahinaz@example.com',
                isPaid: false
            }
        ];
    }

    function validateData(data) {
        if (!Array.isArray(data)) {
            console.error('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            return false;
        }

        for (const item of data) {
            if (typeof item.orderid !== 'string') {
                console.error('orderid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π:', item.orderid);
                return false;
            }
            if (isNaN(parseFloat(item.price))) {
                console.error('price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:', item.price);
                return false;
            }
            if (typeof item.products !== 'string') {
                console.error('products –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π:', item.products);
                return false;
            }
            if (typeof item.name !== 'string') {
                console.error('name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π:', item.name);
                return false;
            }
            if (typeof item.referer !== 'string') {
                console.error('referer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π:', item.referer);
                return false;
            }
            if (typeof item.email !== 'string') {
                console.error('email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π:', item.email);
                return false;
            }
            if (typeof item.isPaid !== 'boolean') {
                console.error('isPaid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:', item.isPaid);
                return false;
            }
        }

        return true;
    }

    async function updatePaymentStatus(orderId, isPaid) {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const eventCode = urlParams.get('event');
            const year = urlParams.get('year');
            const promoCode = urlParams.get('promo');

            const webhookUrl = getWebhookUrl(eventCode);
            const url = new URL(webhookUrl);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL
            url.searchParams.append('mode', 'updatePayment');
            url.searchParams.append('eventCode', eventCode);
            url.searchParams.append('year', year);
            url.searchParams.append('promoCode', promoCode);
            url.searchParams.append('orderId', orderId);
            url.searchParams.append('isPaid', isPaid);

            console.log('Updating payment status for orderId:', orderId, 'to', isPaid);
            console.log('Request URL:', url.toString());

            const response = await fetch(url.toString(), {
                method: 'GET',
                mode: 'no-cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const textData = await response.text();
            console.log('Received text data:', textData);
            
            try {
                const parsedData = JSON.parse(JSON.parse(textData));
                console.log('Parsed data:', parsedData);
                
                if (parsedData.error) {
                    throw new Error(parsedData.error);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const data = parsedData.data || [];
                renderReferralsTable(data, eventCode, true);
                updateStats(data, eventCode);

            } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', parseError);
                throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error);
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: ' + error.message);
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    fetchReferralData(eventCode, year, promoCode, isAdmin);
}); 